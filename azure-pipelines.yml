# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master
  
resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: dockerRegistryServiceConnection
  imageRepository: '20111986/oci-projeto-final-cadastro-funcionarios-app'
  dockerfilePath: '**/Dockerfile'
#TODO: create azure variables or use key vault
  dbConnectString: 'DB_CONNECT_STRING=dbrh_high'
  dbUser: 'DB_USER=app_rh'
  dbPassword: 'DB_PASSWORD=test'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - bash: echo "##vso[task.setvariable variable=dockerImage]$(echo -n $(imageRepository):$(tag))"
      displayName: Get docker image path
    - task: Bash@3
      displayName: 'Generate docker-compose'
      inputs:
        targetType: inline
        script: |
          sudo snap install yq
          environmentVariables='with(.services.app.environment[] ; .'
          environmentVariables+='| select(. == "DB_CONNECT_STRING=*") = env(DB_CONNECT_STRING)'
          environmentVariables+='| select(. == "DB_USER=*") = env(DB_USER)'
          environmentVariables+='| select(. == "DB_PASSWORD=*") = env(DB_PASSWORD)'
          environmentVariables+=')'
          cat docker-compose.yml | yq e ".services.app.image = env(DOCKER_IMAGE) | ${environmentVariables}" - > docker-compose-deploy.yml
      env:
        DOCKER_IMAGE: $(dockerImage) 
        DB_CONNECT_STRING: $(dbConnectString)
        DB_USER: $(dbUser)
        DB_PASSWORD: $(dbPassword)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/docker-compose-deploy.yml'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- stage: Deploy
  dependsOn: Build
  displayName: Deploy application
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(Build.SourceDirectory)'
      - task: AzureWebAppContainer@1
        inputs:
          azureSubscription: 'Azure subscription(22635a60-47c0-4030-bfbf-e699439a52fd)'
          appName: 'gestaorh-appservice'
          multicontainerConfigFile: '$(Build.SourceDirectory)/drop/docker-compose-deploy.yml'
